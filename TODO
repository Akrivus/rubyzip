Refactoring to consider:
* Change the extract/add code so it becomes the same.
** requires an abstract "FileSystem view" of the real fs and the contents of the zip file.
** "FileSystem" should provide stuff like mkdir, exists?, directory? etc. 
** extract entry and add could then be unified to one function:
** copy(src, dst, srcFileSystem, dstFileSystem, 
        recursive = RECURSIVE,
	continueOnExistsProc = proc { false }, 
	createDestDirectoryProc = proc { true })

That would be nice!

change order of parameters in Zip::ZipFile.add (so it becomes src, dst)

More unit tests for FileArchive.extract
* Test createDirProc and continueIfExistProc
* Test more error conditions

Implement FileArchive.add() which relies on addEntry

Change ZipFile (and ZipFileTest)
* extract -> extractEntry
* add -> addEntry
* include FileArchive (and import filearchive.rb)


unit test and implement:
* globbing (Glob module implemented and unit tested, but not used)
* adding directories recursively
* recursive extract
* recursive extract with block for determining whether directories should be created.
* ZipFile.checkIntegrity method
* non-MSDOS permission attributes
** See mail from Ned Konz to ruby-talk subj. "Re: SV: [ANN] Archive 0.2"
* Packager version, required unpacker version in zip headers
** See mail from Ned Konz to ruby-talk subj. "Re: SV: [ANN] Archive 0.2"
* Write interface adapters or adapt interface of rubyzip to become compatible with the "Archive module", which supports ar, tar and mbox

implement small gui app on top, to exercise library and to discover
what features should be added to rubyzip next.

implement storing attributes and ownership information

make release

Refactor ZipFileTest to reduce duplicated code, divide into different
test classes if different fixtures are required and use setup/teardown
some more. Clean up AssertEntry module.

