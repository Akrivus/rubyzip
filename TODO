Refactoring - plan II (Better I think)
LocalFileSystem should be just this:

class LocalFileSystem
  include Singleton

  def directory
    Directory
  end

  def file
    File
  end
end

The convenience methods in ZipFile should be cleaned up/out.

class ZipFileSystem
  def initialize(zipFile)
    @zipfile = zipfile
  end

  def directory
    ZipFsDirectory.new(@zipfile)
  end
  once :directory

  def file
    ZipFsFile.new(@zipfile)
  end
  once :file
end

class ZipFile
  def fileSystem
    ZipFileSystem.new(self)
  end
  once: fileSystem
end

AbstractFileSystemUtils.copy will continue as below.


Refactoring:
Rename the FileArchive module to AbstractFileSystemUtils, and refactor FileArchive.extract to AbstractFileSystemUtils.copy. Write (Local)FileSystem, which implements exists?, mkdir, open, etc in terms of calls to Dir and File. Implement a module ZipFileSystem, which has the same interface. AbstractFileSystemUtils.copy should then use the abstract FileSystem interface for access.

change order of parameters in Zip::ZipFile.add (so it becomes src, dst)

Change to ruby naming conventions for methods, e.g. get_inputstream, instead of getInputstream

More unit tests for FileArchive.extract
* Test createDirProc and continueIfExistProc
* Test more error conditions

Implement FileArchive.add() which relies on addEntry

Change ZipFile (and ZipFileTest)
* extract -> extractEntry
* add -> addEntry
* include FileArchive (and import filearchive.rb)


unit test and implement:
* globbing (Glob module implemented and unit tested, but not used)
* adding directories recursively
* recursive extract
* recursive extract with block for determining whether directories should be created.
* ZipFile.checkIntegrity method
* non-MSDOS permission attributes
** See mail from Ned Konz to ruby-talk subj. "Re: SV: [ANN] Archive 0.2"
* Packager version, required unpacker version in zip headers
** See mail from Ned Konz to ruby-talk subj. "Re: SV: [ANN] Archive 0.2"
* Write interface adapters or adapt interface of rubyzip to become compatible with the "Archive module", which supports ar, tar and mbox

implement small gui app on top, to exercise library and to discover
what features should be added to rubyzip next.

implement storing attributes and ownership information

make release

Refactor ZipFileTest to reduce duplicated code, divide into different
test classes if different fixtures are required and use setup/teardown
some more. Clean up AssertEntry module.

